service: game-night-scoreboard-api
frameworkVersion: '3'

plugins:
  - serverless-iam-roles-per-function
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  region: us-east-2
  runtime: nodejs16.x
  stage: ${opt:stage, 'local'}
  deploymentBucket:
    name: serverless-deploys-gnsb
    maxPreviousDeploymentArtifacts: 3
  stackName: ${self:service}-${self:provider.stage}
  tags:
    app: ${self:custom.appShortName}
    environment: ${self:provider.stage}
  httpApi:
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Join:
          - ''
          - - 'https://cognito-idp.'
            - '${self:provider.region}'
            - '.amazonaws.com/'
            - Ref: serviceUserPool
        audience:
          - Ref: serviceUserPoolClient
  environment:
    APP_ENVIRONMENT: ${self:provider.stage}

package:
  individually: true

custom:
  appShortName: gnsb
  tableNames:
    groupsTable: ${self:custom.appShortName}-groups-table-${self:provider.stage}
    playersTable: ${self:custom.appShortName}-players-table-${self:provider.stage}
    playLogTable: ${self:custom.appShortName}-play-log-table-${self:provider.stage}
  apiName: ${self:custom.appShortName}-apigateway-${self:provider.stage}
  userPoolName: ${self:custom.appShortName}-userpool-${self:provider.stage}
  userPoolClientName: ${self:custom.appShortName}-userpoolclient-${self:provider.stage}
  userPoolDomain: ${self:custom.appShortName}-userpooldomain-${self:provider.stage}
  # DynamoDB Local settings
  dynamodb:
    stages:
      - local
    migrate: true
    sharedDb: true

functions:
  # Group Functions
  createGroup:
    handler: src/handlers/groups/create-group.handler
    events:
      - httpApi:
          method: POST
          path: /v1/groups
          authorizer: serviceAuthorizer
    environment:
      GROUPS_TABLE: ${self:custom.tableNames.groupsTable}
    iamRoleStatementsName: ${self:custom.appShortName}-${self:provider.stage}-createGroup-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableNames.groupsTable}"

  getGroup:
    handler: src/handlers/groups/get-group.handler
    events:
      - httpApi:
          method: GET
          path: /v1/groups/{id}
          authorizer: serviceAuthorizer
    environment:
      GROUPS_TABLE: ${self:custom.tableNames.groupsTable}
    iamRoleStatementsName: ${self:custom.appShortName}-${self:provider.stage}-getGroup-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableNames.groupsTable}"

  updateGroup:
    handler: src/handlers/groups/update-group.handler
    events:
      - httpApi:
          method: PUT
          path: /v1/groups/{id}
          authorizer: serviceAuthorizer
    environment:
      GROUPS_TABLE: ${self:custom.tableNames.groupsTable}
    iamRoleStatementsName: ${self:custom.appShortName}-${self:provider.stage}-updateGroup-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableNames.groupsTable}"

  deleteGroup:
    handler: src/handlers/groups/delete-group.handler
    events:
      - httpApi:
          method: DELETE
          path: /v1/groups/{id}
          authorizer: serviceAuthorizer
    environment:
      GROUPS_TABLE: ${self:custom.tableNames.groupsTable}
    iamRoleStatementsName: ${self:custom.appShortName}-${self:provider.stage}-deleteGroup-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableNames.groupsTable}"

  # Player Functions
  createPlayer:
    handler: src/handlers/players/create-player.handler
    events:
      - httpApi:
          method: POST
          path: /v1/players
          authorizer: serviceAuthorizer
    environment:
      PLAYERS_TABLE: ${self:custom.tableNames.playersTable}
    iamRoleStatementsName: ${self:custom.appShortName}-${self:provider.stage}-createPlayer-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableNames.playersTable}"

  getPlayer:
    handler: src/handlers/players/get-player.handler
    events:
      - httpApi:
          method: GET
          path: /v1/players/{id}
          authorizer: serviceAuthorizer
    environment:
      PLAYERS_TABLE: ${self:custom.tableNames.playersTable}
    iamRoleStatementsName: ${self:custom.appShortName}-${self:provider.stage}-getPlayer-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableNames.playersTable}"

  updatePlayer:
    handler: src/handlers/players/update-player.handler
    events:
      - httpApi:
          method: PUT
          path: /v1/players/{id}
          authorizer: serviceAuthorizer
    environment:
      PLAYERS_TABLE: ${self:custom.tableNames.playersTable}
    iamRoleStatementsName: ${self:custom.appShortName}-${self:provider.stage}-updatePlayer-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableNames.playersTable}"

  deletePlayer:
    handler: src/handlers/players/delete-player.handler
    events:
      - httpApi:
          method: DELETE
          path: /v1/players/{id}
          authorizer: serviceAuthorizer
    environment:
      PLAYERS_TABLE: ${self:custom.tableNames.playersTable}
    iamRoleStatementsName: ${self:custom.appShortName}-${self:provider.stage}-deletePlayer-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableNames.playersTable}"

  # Play Log Functions
  createPlayLogEntry:
    handler: src/handlers/play-log/create-play-log-entry.handler
    events:
      - httpApi:
          method: POST
          path: /v1/groups/{groupId}/play-log
          authorizer: serviceAuthorizer
    environment:
      PLAY_LOG_TABLE: ${self:custom.tableNames.playLogTable}
    iamRoleStatementsName: ${self:custom.appShortName}-${self:provider.stage}-createPlayLogEntry-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableNames.playLogTable}"

  getPlayLogEntry:
    handler: src/handlers/play-log/get-play-log-entry.handler
    events:
      - httpApi:
          method: GET
          path: /v1/groups/{groupId}/play-log/{entryId}
          authorizer: serviceAuthorizer
    environment:
      PLAY_LOG_TABLE: ${self:custom.tableNames.playLogTable}
    iamRoleStatementsName: ${self:custom.appShortName}-${self:provider.stage}-getPlayLogEntry-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableNames.playLogTable}"

  updatePlayLogEntry:
    handler: src/handlers/play-log/update-play-log-entry.handler
    events:
      - httpApi:
          method: PUT
          path: /v1/groups/{groupId}/play-log/{entryId}
          authorizer: serviceAuthorizer
    environment:
      PLAY_LOG_TABLE: ${self:custom.tableNames.playLogTable}
    iamRoleStatementsName: ${self:custom.appShortName}-${self:provider.stage}-updatePlayLogEntry-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableNames.playLogTable}"

  deletePlayLogEntry:
    handler: src/handlers/play-log/delete-play-log-entry.handler
    events:
      - httpApi:
          method: DELETE
          path: /v1/groups/{groupId}/play-log/{entryId}
          authorizer: serviceAuthorizer
    environment:
      PLAY_LOG_TABLE: ${self:custom.tableNames.playLogTable}
    iamRoleStatementsName: ${self:custom.appShortName}-${self:provider.stage}-deletePlayLogEntry-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableNames.playLogTable}"

resources:
  Resources:
    groupsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableNames.groupsTable}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    playersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableNames.playersTable}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    playLogTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableNames.playLogTable}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE

    serviceUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.userPoolName}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true

    serviceUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.userPoolClientName}
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        UserPoolId:
          Ref: serviceUserPool
        CallbackURLs:
          - https://localhost:3000
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        SupportedIdentityProviders:
          - COGNITO

    serviceUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId:
          Ref: serviceUserPool
        Domain: ${self:custom.userPoolDomain}
